#summary Criando a Calculadora Servidora.

<wiki:toc max_depth="2" />

= Servidor =
O Servidor é o objeto remoto que implementa uma interface remota.  
== Criando o Projeto ==
Com o `NetBeans` aberto, crie um novo projeto de aplicação para sensor SunSPOT com o nome `SensorCalculatorServer`. O pacote padrão do tutorial é o `org.sunspotworld`.
 
== Configurando ==
Repita o mesmo procedimento de configuração do servidor de nomes, isto é, adicione o JAR/SRC ao `classpath` e modifique o arquivo `build.properties`.

== Interface Remota ==
Vamos definir a interface remota `Calculator` conforme especificamos no diagrama de classes. Crie uma interface no pacote `org.sunspotworld` chamada `Calculator`. Primeiramente devemos estender a interface `spot.rmi.Remote` e adicionar os métodos definidos. O código completo fica:
{{{
package org.sunspotworld;

import spot.rmi.Remote;
import spot.rmi.RemoteException;

public interface Calculator extends Remote {
    public int add(int x, int y) throws RemoteException;
    public int subtract(int x, int y) throws RemoteException;
    public double multiply(float x, int y) throws RemoteException;
    public double divide(double x, double y) throws RemoteException;
    public String lastOperation() throws RemoteException;
}
}}}

== Gerando os Stubs/Skel ==
Utilize o plug-in do spotSHOUT para gerar os stubs/skeletons. Selecione a interface remota, clique com o botão direito e selecione a opção _Generate SunSPOT Stub/Skeleton_. Os arquivos gerados podem levar um tempo (cerca de 20s) para aparecer no `NetBeans` devido a lentidão da IDE para verificar novos arquivos no diretório do projeto.

http://spotshout.googlecode.com/svn/wiki/images/tutorial/genplugin.png

== Programando a Interface Remota ==
Agora iremos implementar a interface remota, o código do servidor. Para isso, crie uma classe chamada `CalculatorImpl` e implemente as operações da interface `Calculator`. A nossa implementação fica da seguinte maneira:
{{{
package org.sunspotworld;

import spot.rmi.RemoteException;

public class CalculatorImpl implements Calculator {

    String lastOp;

    public int add(int x, int y) throws RemoteException {
        lastOp = "add";
        return x + y;
    }

    public int subtract(int x, int y) throws RemoteException {
        lastOp = "subtract";
        return x - y;
    }

    public double multiply(float x, int y) throws RemoteException {
        lastOp = "multiply";
        return (double) x * y;
    }

    public double divide(double x, double y) throws RemoteException {
        lastOp = "divide";
        return x / y;
    }

    public String lastOperation() throws RemoteException {
        return lastOp;
    }
}
}}}

== Renomeando a Aplicação ==
Vamos modificar o nome da nossa aplicação no sensor, isto é, vamos mudar o nome da nossa `midlet`. Renomeie a classe principal da aplicação *`org.sunspotworld.SunSpotApplication`* para *`org.sunspotworld.SensorCalculatorServer`*.  Para realizar isso, selecione a classe *`SunSpotApplication`* e pressione `Ctrl + R` e escolha o nome *`SensorCalculatorServer`*.

== Registrando o Servidor ==
Primeiramente devemos crar uma instância da classe `CalculatorImpl` para obter um objeto remoto. Para tornar esse objeto remoto em uma referência remota nós devemos exportá-lo, e se quisermos expor o objeto na rede devemos vincular ele a um servidor de nomes. 

Localizamos o servidor de nomes através da operação `LocateRegistry.getRegistry()` que realiza um broadcast e retorna o servidor de nomes. Após obter o servidor de nomes podemos executar qualquer operação do Java RMI.

A operação _bind_ já trata de exportar o objeto remoto automaticamente para nós, portanto não é necessário exportar o objeto manualmente. Nós iremos registrar o nosso objeto calculadora com o nome *Cal*.  Um parâmetro adicional nessa chamada é o nome completo (incluindo pacote) da interface remota. Esse parâmetro é necessário devido a falta de reflexão na API padrão do Sun SPOT. O código completo da classe principal do sensor servidor fica:

{{{
package org.sunspotworld;

import java.io.IOException;

import javax.microedition.midlet.MIDlet;
import javax.microedition.midlet.MIDletStateChangeException;
import spot.rmi.registry.LocateRegistry;
import spot.rmi.registry.Registry;

public class SensorCalculatorServer extends MIDlet {

    protected void startApp() throws MIDletStateChangeException {
        try {
            Calculator cal = new CalculatorImpl();

            // Get the Name Server by broadcast
            Registry registry = LocateRegistry.getRegistry();

            // Registering the remote interface org.sunspotworld.Calculator as Ca
            registry.bind("Cal", "org.sunspotworld.Calculator", cal);
            System.out.println("Registered this");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    protected void pauseApp() {
    }

    protected void destroyApp(boolean unconditional) throws MIDletStateChangeException {
    }
}
}}}