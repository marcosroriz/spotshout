#summary Criando a Calculadora Cliente.

<wiki:toc max_depth="2" />

= Cliente =
Agora iremos criar o sensor cliente. Este irá utilizar a interface remota e o servidor de nomes para localizar e comunicar-se de maneira transparente com a referência remota no sensor servidor.

== Criando o Projeto ==
Com o `NetBeans` aberto, crie um novo projeto de aplicação para sensor SunSPOT com o nome `SensorCalculatorClient`. O pacote padrão do tutorial é o `org.sunspotworld`.

== Configurando ==
Repita o mesmo procedimento de configuração do servidor de nomes, isto é, adicione o JAR/SRC ao `classpath` e modifique o arquivo `build.properties`.

== Interface Remota ==
Copie a definição da interface remota, isto é, o arquivo fonte da interface `Calculator` para o pacote `org.sunspotworld` do projeto cliente.

http://spotshout.googlecode.com/svn/wiki/images/tutorial/client-copy.png

== Gerando os Stubs/Skel ==
Repita o procedimento utilizado para gerar os stubs/skeletons do servidor, porém, selecione agora a interface remota no projeto cliente.

== Renomeando a Aplicação ==
Vamos modificar o nome da nossa aplicação no sensor, isto é, vamos mudar o nome da nossa `midlet`. Renomeie a classe principal da aplicação *`org.sunspotworld.*SunSpotApplication*` para `org.sunspotworld.*SensorCalculatorClient*`.  Para realizar isso, selecione a classe SunSpotApplication e pressione `Ctrl + R` e escolha o nome `SensorCalculatorClient`.

== Usando o Objeto ==
Localizamos o servidor de nomes através da operação `LocateRegistry.getRegistry()` que realiza um broadcast e retorna o servidor de nomes. Após obter o servidor de nomes podemos executar qualquer operação do Java RMI.

Iremos agora utilizar a operação _lookup_ para obter a referência remota “Cal”. Após obter a referência remota, podemos utilizar qualquer método da interface remota. Podemos então executar uma soma e em seguida verificar se foi mesmo a última operação executada. O código da classe principal do cliente fica:

{{{
package org.sunspotworld;

import java.io.IOException;
import javax.microedition.midlet.MIDlet;
import javax.microedition.midlet.MIDletStateChangeException;
import spot.rmi.registry.LocateRegistry;
import spot.rmi.registry.Registry;

public class SensorCalculatorClient extends MIDlet {

    protected void startApp() throws MIDletStateChangeException {
        try {
            // Get the Name Server by broadcast
            Registry registry = LocateRegistry.getRegistry();

            // Obtendo referência remota de nome "Cal"
            Calculator cal = (Calculator) registry.lookup("Cal");

            // Using the remote reference
            int addOp = cal.add(20, 22);
            System.out.println("The sum of 20 and 22 is: " + addOp);

            double multiplyOp = cal.multiply(30, 2);
            System.out.println("The multiplication of 30 and 2 is: " + multiplyOp);

            String lastOp = cal.lastOperation();
            System.out.println("The last operation was: " + lastOp);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    protected void pauseApp() {
    }

    protected void destroyApp(boolean unconditional) throws MIDletStateChangeException {
    }
}
}}}