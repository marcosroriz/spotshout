#summary Experimentando o spotSHOUT.

<wiki:toc max_depth="2" />

= Servidor de Nomes =
Os sensores utilizam nomes para encontrar referências remotas na rede. Podemos perceber que o  servidor de nomes ocupa um papel importantíssimo, pois, é ele que os sensores utilizam para encontrar nomes. O servidor de nome *deve rodar separadamente em um sensor ou hospedeiro*, não sendo possível que um sensor seja tanto o servidor de nomes como um cliente/servidor de referências remotas.

== Criando o Projeto ==
Neste tutorial iremos utilizar um sensor como servidor de nomes. Inicie o `NetBeans` e crie um novo projeto de aplicação para sensor SunSPOT com o nome `ServidorDeNomesSensor`. O pacote padrão do tutorial será o `org.sunspotworld`. Veja a imagem abaixo para mais detalhes:

http://spotshout.googlecode.com/svn/wiki/pt-BR/imagens/tutorial/servidorDeNomes-wizard.png
 
== Configurando ==
Como especificado no guia de instalação iremos adiciona o JAR do spotSHOUT e configurar o projeto para trabalhar com o middleware.
Adicione ao `classpath` do projeto o JAR e SRC do spotSHOUT no menu de propriedades. Também modifique o arquivo `build.properties` adicionando a propriedade `utility.jars`, como no exemplo abaixo:

{{{
utility.jars=C:/caminho/para/spotSHOUT-1.0.jar
}}}

http://spotshout.googlecode.com/svn/wiki/pt-BR/imagens/tutorial/servidorDeNomes-buildProperties.png

== Iniciando o Servidor de Nomes ==
Para criar o servidor basta executar o método _createRegistry()_ da classe `LocateRegistry`. Modifique o código da classe principal para conter este método. O corpo da classe principal devera ficar conforme o seguinte código:

{{{
package org.sunspotworld;

import javax.microedition.midlet.MIDlet;
import javax.microedition.midlet.MIDletStateChangeException;
import spot.rmi.registry.LocateRegistry;

public class SunSpotApplication extends MIDlet {

    protected void startApp() throws MIDletStateChangeException {
        LocateRegistry.createRegistry();
    }

    protected void pauseApp() {
    }

    protected void destroyApp(boolean unconditional) throws MIDletStateChangeException {
    }
}
}}}
